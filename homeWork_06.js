// 1) Почитать про принципы программирования KISS, DRY, YAGNI + почитать про "Антипаттерны" Чистого кода

/*
KISS (Keep It Simple Stupid) - идея заключается в том, чтобы делать код так просто, как это только возможно. Просто является ключевой ценностью при проектировании, написании кода и создании систем в целом.

Основные тезисы:
1. Минимизация сложности
2. Избегание избыточности 
3. Читаемость и понимаемость для других разработчиков
4. Эффективное использование ресурсов
*/

/*
DRY (Don't Repeat Your Self) - идея заключается в том, чтобы избегать дублирования кода, используемого в нескольких местах, в таких случаях его необходимо вынести в отдельную функцию или метод. Таким образом, при необходимости внести изменения - это можно сделать в одном месте.

Основные тезисы:
1. Вынесение общей функциональности
2. Использование полиморфизма и наследования при наличии классов
3. Использование шаблонов и абстракций для выделения общих паттернов и методов
4. Использование библиотек и фреймворков 
*/

/*
YAGNI (You Ain't Gonna Need It) - идея в том, чтобы не добавлять лишней функциональности в код, если на данном этапе она не требуется для решения текущих задач. Принцип призывает к разумности и балансу.
*/

/*
"Антипаттерны" Чистого кода - это примеры плохих практик и подходов при написании кода, которые следует избегать.

Например:
1. Магические числа и строки - это захардкоженные числа и строки, не вынесенные в константы или переменные с описательными именами
2. Длинные функции и методы.
3. Монолитные классы и объекты.
4. Слишком сложные конструкции управления - использование глубоко вложенных условий, циклов и операторов ветвления
5. Ненужные комментарии
6. Неинформативные имена переменных и функций
7. Прямая работа с DOM в JS без использования моделей MVC/MVVM
*/

/////////////////////////////////////////////////////////////////////

// 2) Прочитать про способы хранения LocalStorage, SessionStorage и Cookie

/*
LocalStorage - это механизм хранения данных в виде пар ключ-значение в браузере. Данные в нем хранятся и после закрытия браузера. Могут использоваться для хранения пользовательских настроек. Доступ через объект localStorage.

Размер ~ 5Mb
*/

/*
SessionStorage - это механизм хранения данных, аналогичные LocalStorage, но данные хранятся только на время сеанса браузера. После закрытия вкладки данные удаляются. Используется для хранения товаров в корзине или состояний текущего сеанса

Размер ~ несколько Mb. Точное значение зависит от браузера.
*/

/*
Cookies - это небольшие текстовые файлы, отправляемые сервером и хранящиеся в браузере пользователя. Используются для сохранения состояния сеанса и идентификации пользователя, а также для отслеживания действий пользователя на сайте.

Размер ~ не более 4Kb
*/

/////////////////////////////////////////////////////////////////////

// 3) HTML / CSS - Базовая структура html документа, БЭМ методология

/*
Базовая структура HTML документа включает в себя:
1) doctype, который объявляет версию HTML
2) тег <html> с атрибутом lang для указания языка
3) <head> для размещения метатегов
4) <body> с основным содержимым страницы
*/

/*
БЭМ методология (Block-Element-Modifier) - это подход к именованию классов в HTML и CSS. Основывается на разделении интерфейса на независимые блоки, элементы и модификаторы.

1) Блок - это независимый компонент интерфейса, который имеет смысл сам по себе, например header или menu. Классы для блока указываются без префикса и разделяются пробелом или дефисом
2) Элемент - является частью блока, не имеет смысла вне конекста своего блока, например в menu это может быть item. Классы для элемента указываются через два подчеркивания после имени блока
3) Модификатор - является вариацией блока или элемента, он меняет их внешний вид, например theme для header. Классы модификаторов указываются через два дефиса после имени блока или элемента.
*/

/////////////////////////////////////////////////////////////////////

// 4) Почитать про паттерны функционального программирования + посмотреть примеры использования

/*
Паттерны функционального программирования - это шаблоны проектирования, которые ориентированы на использование функций как основы для строительных блоков приложения. Они помогают создавать более простой, модульный и легко тестируемый код.

Сами паттерны:
1) Использование функций высшего порядка - это функции, которые принимают другие функции в качестве аргументов или возвращают функции в качестве результата.
2) Использование каррирования - это процесс преобразования функции с множеством аргументов в последовательность функций с одним аргументом.
3) Использование функциональной композиции - это процесс комбинирования нескольких функций для создания новой функции. Результат выполнения одной функции становится входными данными для другой.
4) использование неизменяемости данных - это принцип по которому данные в программе не изменяются после инициализации. Вместо этого создаются новые данные на основе старых при каждом изменении.
*/

/////////////////////////////////////////////////////////////////////

// 5) Способы позиционирования контента на странице

/*
Это про позиционирование контента с помощью CSS.

1) static - это поведение по умолчанию. Элементы при создании размещаются в потоке документа и отображаются в порядке расположения их в HTML.

2) absolute - это позиционирование описывает поведение, когда элементы отделяются от основного потока расположения элементов и позиционируются относительно ближайшего родительского элемента или края браузера, если родителя нет

3) fixed - это позиционирование описывает поведение, когда элементы также исключаются из потока, но позиционируются относительно краев браузера. Остаются на месте при прокрутке браузера.

4) relative - это позиционирование описывает поведение, элементы остаются в потоке, но их позиция может быть сдвинута относительно их исходного местоположения с помощью top/bottom/right/left

5) flexbox - это позиционирование описывает поведение, когда элементы располагаются в строку или столбец, что упрощает их размещение на странице. Применяется в разработке адаптивных интерфейсов.

6) grid - это позиционирование описывает поведение, когда элементы располагаются в двумерной сетке, что упрощает их размещение на странице. Позволяет создавать сложные макеты. Применяется в разработке адаптивных интерфейсов.
*/

/////////////////////////////////////////////////////////////////////

// 6) Веса селекторов

/*
Вес селектора это приоритет или специфичность в случае конфликта между несколькими правилами стилей.

Вес по убыванию значимости:
1) !important
2) инлайновые стили, это стили определенные с помощью тега <style> непосредственно в HTML или во внешних CSS файлах
3) id - стили, определённые через атрибут id
4) классы, псевдоклассы и атрибуты - :hover/:active/:focus
5) теговые селекторы - div/p/a
6) селекторы наследования - div p
*/
