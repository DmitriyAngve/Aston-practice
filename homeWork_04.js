// 1) Какие бывают алгоритмы сортировок?

/*
1.1 Сортировка пузырьком:
Проходит по списку многократно, сравнивая пару соседних элементов и меняя их местами, если они находятся в неправильном порядке

1.2 Сортировка выбором:
Находит минимальный элемент из списка и помещает его в начало списка. Затем делает то же самое для остальных элементов, смещая минимальный из оставшихся в начало списка

1.3 Сортировка слиянием:
Разделяет список на две части, сортируя каждую отдельно, затем сливаем два отсортированных списка в один

1.4 Быстрая сортировка:
Выбирает один элемент (как опорный элемент) и разделяет список на две части, все элементы, которое меньше опорного элемента в одну часть списка, остальные в противоположную часть списка. Затем с помощью рекурсии продолжает то же самое к получившимся спискам
*/

//////////////////////////////////////////////////////////////////

// 2) Прочитать про "Операторы и выражения, циклы в JS"
/*
Операторы, выражения и циклы в JS это неотъемлимая часть синтаксиса языка, позволяющая выполнять различные операции и повторять блоки кода.

2.1 Операторы могут мыть логическими, арифметическими и операторами сравнения. 
Чаще всего я пользуюсь логическими операторами (&& и ||) и оператором сравнения (===) 

2.2 Выражения - это комбинация значений, переменных и значений, которые могут быть вычислены в одно значение. Другими словами, это комбинация операторов и операндов. Это основные строительные блоки программ. Чаще всего использую условные выражения (тернарный оператор) и JSX выражения в React.

2.3 Циклы - используются для повторения выполнения блока кода. (for, while, for-of, for-in). Чаще всего использую for.
*/

//////////////////////////////////////////////////////////////////

// 3) Создать объект Person несколькими способами, после создать объект Person2, чтобы в нём были доступны методы объекта Person. Добавить метод logInfo чтоб он был доступен всем объектам.

// Я выбрал 2 способа создания объекта:
// Литерал:
const Person = {
  name: "Dmitriy",
  age: 5,
  greet() {
    console.log(`Hello, my name ${this.name}, and I'm ${this.age} years old`);
  },
};

// Функция конструктор
/*
function Person(name, age) {
  (this.name = name), (this.age = age);
  this.greet = function () {
    console.log(`Hello, my name ${this.name}, and I'm ${this.age} years old`);
  };
}
*/

// Чтобы методы Person стали доступным в Person2 я использую наследование (хотя можно воспользоваться копированием):
const Person2 = Object.create(Person);
Person2.name = "Alice";
Person2.age = "6";

// Добавляю метод logInfo()
function logInfo() {
  console.log("logInfo");
}
Person.logInfo = logInfo;
Person2.logInfo = logInfo;
console.log(Person, Person2);

//////////////////////////////////////////////////////////////////

// 4) Создать класс PersonThree c get и set для поля name и конструктором, сделать класс наследник от класса Person.

class Person3 {
  constructor(name) {
    this._name = name;
  }

  get name() {
    return this._name;
  }

  set name(name2) {
    this._name = name2;
  }

  greet() {
    console.log(`Hello, I'm ${this._name}!`);
  }
}
class PersonThree extends Person3 {
  constructor(name, age) {
    super(name);
    this.age = age;
  }

  get name() {
    return this._name;
  }

  set name(name2) {
    this._name = name2;
  }

  greet() {
    console.log(`Name - ${this._name}, Age- ${this.age}`);
  }
}

const personThree = new PersonThree("Anna", 7);
// console.log(personThree.name, personThree.age);
personThree.greet();

//////////////////////////////////////////////////////////////////

// БОНУС: 1) Написать функцию, которая вернет массив с первой парой чисел, сумма которых равна total:
let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
let total = 13;
//result = [4, 9]

const firstSum = (arr, total) => {
  // Я использую хэш таблицу
  const ht = {};
  for (let i = 0; i < arr.length; i++) {
    // arr[i] будет ключем, индекс будет значением
    ht[arr[i]] = i;
  }
  console.log(ht);

  for (let i = 0; i < arr.length; i++) {
    // ищу разницу между total и каждым элементом массива
    const difference = total - arr[i];
    console.log(difference);

    // теперь проверяю хэш таблицу на наличие значения с ключом difference
    if (ht[difference]) {
      return [arr[i], difference];
    }
  }

  return "Not found";
};

console.log(firstSum(arr, total));
